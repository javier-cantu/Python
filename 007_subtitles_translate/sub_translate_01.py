"""
==================================================================================
üé¨ Script: traducir_subs.py
üìå Descripci√≥n:
    Este script traduce archivos de subt√≠tulos en formato `.srt` del ingl√©s al espa√±ol.
    Mantiene el formato original de los subt√≠tulos (numeraci√≥n y tiempos) y corrige
    la gram√°tica en espa√±ol, incluyendo:

    ‚úÖ Capitalizaci√≥n correcta: solo la primera letra de cada oraci√≥n en may√∫scula.
    ‚úÖ Soporte para signos de interrogaci√≥n (¬ø) y exclamaci√≥n (¬°), asegurando que
       la primera letra despu√©s de ellos est√© en may√∫scula.
    ‚úÖ Traducci√≥n automatizada con la API de Deep Translator (Google Translate).
    ‚úÖ Muestra el progreso cada 100 l√≠neas para archivos grandes.
    ‚úÖ Guarda el resultado en un nuevo archivo `.srt`.

üìå Uso:
    1Ô∏è‚É£ Aseg√∫rate de que el archivo `.srt` en ingl√©s est√© en la misma carpeta que este script.
    2Ô∏è‚É£ Instala las dependencias necesarias si no lo has hecho:
        pip install pysrt deep-translator
    3Ô∏è‚É£ Ejecuta el script en la terminal o l√≠nea de comandos:
        python traducir_subs.py
    4Ô∏è‚É£ El archivo traducido se guardar√° con el mismo nombre, pero con "_Spanish" a√±adido.

üìå Notas:
    - Si el archivo `.srt` es muy grande, puede tardar algunos minutos en procesarse.
    - En caso de errores en la traducci√≥n de alguna l√≠nea, el script continuar√° sin detenerse.
    - Se recomienda revisar el archivo final por posibles ajustes manuales.

üõ† Creado por: [Tu Nombre o Alias]
üìÖ √öltima actualizaci√≥n: [Fecha]

==================================================================================
"""

import os
import pysrt
from deep_translator import GoogleTranslator
import re

# Obtener el directorio donde est√° el script
input_dir = os.path.dirname(os.path.abspath(__file__))

# Definir las rutas de los archivos
input_file = os.path.join(input_dir, "A_Little_Princess_English.srt")
output_file = os.path.join(input_dir, "A_Little_Princess_Spanish.srt")

print(f"üìÇ Directorio del script: {input_dir}")
print(f"üìÑ Archivo de entrada: {input_file}")
print(f"üìÑ Archivo de salida: {output_file}")

# Verificar si el archivo de entrada existe
if not os.path.exists(input_file):
    print(f"‚ùå ERROR: No se encontr√≥ el archivo '{input_file}'. Verifica el nombre y la ubicaci√≥n.")
    exit(1)

print("‚úÖ Archivo encontrado. Cargando subt√≠tulos...")

# Cargar subt√≠tulos
subs = pysrt.open(input_file)

# Inicializar el traductor (Ingl√©s -> Espa√±ol)
translator = GoogleTranslator(source="en", target="es")

# Funci√≥n para corregir la capitalizaci√≥n, incluyendo signos de interrogaci√≥n y exclamaci√≥n
def fix_capitalization(text):
    """
    Corrige la gram√°tica en espa√±ol:
    - Capitaliza la primera letra de cada oraci√≥n.
    - Maneja correctamente los signos ¬ø y ¬° asegurando que la primera letra despu√©s de ellos est√© en may√∫scula.
    """
    # Expresi√≥n regular para detectar oraciones
    sentences = re.split(r'([.!?¬ø¬°] )', text)
    corrected_sentences = []
    
    for i, sentence in enumerate(sentences):
        sentence = sentence.strip()
        
        if not sentence:
            continue
        
        # Si es un signo de puntuaci√≥n, mantenerlo sin cambios
        if sentence in [".", "!", "?", "¬ø", "¬°"]:
            corrected_sentences.append(sentence)
            continue
        
        # Si la oraci√≥n comienza con ¬ø o ¬°, aseguramos que la siguiente letra est√© en may√∫scula
        if sentence.startswith("¬ø") or sentence.startswith("¬°"):
            if len(sentence) > 1:
                sentence = sentence[0] + sentence[1].upper() + sentence[2:]
        
        else:
            # Asegurar que la primera letra de una oraci√≥n normal est√© en may√∫scula
            sentence = sentence.capitalize()
        
        corrected_sentences.append(sentence)
    
    return " ".join(corrected_sentences)  # Unir todo en un texto corregido

# Mostrar cu√°ntos subt√≠tulos hay
total_subs = len(subs)
print(f"üìë Total de l√≠neas de subt√≠tulos: {total_subs}")

# Traducir y corregir capitalizaci√≥n en cada l√≠nea del subt√≠tulo
for i, sub in enumerate(subs, start=1):
    if sub.text.strip():  # Evitar traducir l√≠neas vac√≠as
        try:
            translated_text = translator.translate(sub.text)
            sub.text = fix_capitalization(translated_text)  # Aplicar correcci√≥n de may√∫sculas y signos
        except Exception as e:
            print(f"‚ö†Ô∏è Error al traducir la l√≠nea {i}: {e}")
    if i % 100 == 0:  # Mostrar progreso cada 100 l√≠neas
        print(f"‚è≥ Traducidas {i}/{total_subs} l√≠neas...")

print("‚úÖ Traducci√≥n completada. Guardando archivo...")

# Guardar el archivo traducido
subs.save(output_file, encoding="utf-8")

print(f"üéâ Traducci√≥n finalizada con correcci√≥n de gram√°tica y signos de puntuaci√≥n. Archivo guardado en: {output_file}")