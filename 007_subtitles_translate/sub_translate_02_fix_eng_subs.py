"""
==================================================================================
üé¨ Script: clean_english_subs.py
üìå Descripci√≥n:
    Este script limpia y corrige subt√≠tulos en ingl√©s eliminando may√∫sculas innecesarias,
    mejorando la gram√°tica y asegurando que la puntuaci√≥n sea adecuada.

    ‚úÖ Convierte texto completamente en may√∫sculas a formato est√°ndar (solo may√∫scula inicial).
    ‚úÖ Elimina dobles espacios y signos de puntuaci√≥n mal colocados.
    ‚úÖ Mantiene el formato original del `.srt` (tiempos y numeraci√≥n).

üìå Uso:
    1Ô∏è‚É£ Aseg√∫rate de que el archivo `.srt` que quieres limpiar est√© en la misma carpeta que este script.
    2Ô∏è‚É£ Instala las dependencias necesarias si no lo has hecho:
        pip install pysrt
    3Ô∏è‚É£ Ejecuta el script en la terminal o l√≠nea de comandos:
        python clean_english_subs.py
    4Ô∏è‚É£ El archivo limpio se guardar√° con "_cleaned" a√±adido al nombre.

üìÖ √öltima actualizaci√≥n: [5/Enero/2025]

==================================================================================
"""

import os
import pysrt
import re

# Obtener el directorio donde est√° el script
input_dir = os.path.dirname(os.path.abspath(__file__))

# Definir las rutas de los archivos
input_file = os.path.join(input_dir, "A_Little_Princess_English_fromDVD.srt")
output_file = os.path.join(input_dir, "A_Little_Princess_English_Cleaned.srt")

print(f"üìÇ Directorio del script: {input_dir}")
print(f"üìÑ Archivo de entrada: {input_file}")
print(f"üìÑ Archivo de salida: {output_file}")

# Verificar si el archivo de entrada existe
if not os.path.exists(input_file):
    print(f"‚ùå ERROR: No se encontr√≥ el archivo '{input_file}'. Verifica el nombre y la ubicaci√≥n.")
    exit(1)

print("‚úÖ Archivo encontrado. Cargando subt√≠tulos...")

# Cargar subt√≠tulos
subs = pysrt.open(input_file)

# Funci√≥n para corregir la capitalizaci√≥n y eliminar errores de formato
def clean_text(text):
    """
    Limpia el texto de los subt√≠tulos:
    - Convierte texto en may√∫sculas a capitalizaci√≥n normal.
    - Corrige espacios y puntuaci√≥n innecesaria.
    - Asegura que cada oraci√≥n tenga una may√∫scula inicial y min√∫sculas despu√©s.
    """

    # Convertir todo a min√∫sculas si el texto estaba completamente en may√∫sculas
    if text.isupper():
        text = text.lower()

    # Expresi√≥n regular para detectar oraciones
    sentences = re.split(r'([.!?]) ', text)  # Separa por ".", "!", "?" seguidos de un espacio
    corrected_sentences = []

    for i, sentence in enumerate(sentences):
        sentence = sentence.strip()
        
        if not sentence:
            continue

        # Si es un signo de puntuaci√≥n, mantenerlo sin cambios
        if sentence in [".", "!", "?"]:
            corrected_sentences.append(sentence)
            continue

        # Asegurar que la primera letra de cada oraci√≥n est√© en may√∫scula
        sentence = sentence.capitalize()
        
        corrected_sentences.append(sentence)

    cleaned_text = " ".join(corrected_sentences)  # Unir todo en un texto corregido

    # Eliminar espacios extra
    cleaned_text = re.sub(r'\s+', ' ', cleaned_text).strip()

    return cleaned_text

# Mostrar cu√°ntos subt√≠tulos hay
total_subs = len(subs)
print(f"üìë Total de l√≠neas de subt√≠tulos: {total_subs}")

# Limpiar la capitalizaci√≥n y gram√°tica de cada l√≠nea del subt√≠tulo
for i, sub in enumerate(subs, start=1):
    if sub.text.strip():  # Evitar l√≠neas vac√≠as
        try:
            sub.text = clean_text(sub.text)  # Aplicar correcci√≥n de formato y capitalizaci√≥n
        except Exception as e:
            print(f"‚ö†Ô∏è Error al limpiar la l√≠nea {i}: {e}")
    if i % 100 == 0:  # Mostrar progreso cada 100 l√≠neas
        print(f"‚è≥ Limpieza completada en {i}/{total_subs} l√≠neas...")

print("‚úÖ Limpieza completada. Guardando archivo...")

# Guardar el archivo corregido
subs.save(output_file, encoding="utf-8")

print(f"üéâ Limpieza finalizada con correcci√≥n de gram√°tica y formato. Archivo guardado en: {output_file}")
